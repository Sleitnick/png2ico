name: Release
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: true

  build:
    needs: ["create-release"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            label: linux
            build: build/linux/x86_64/release

          - host: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            label: win64
            build: build/windows/x64/release

          - host: macos
            os: macos-13
            target: x86_64-apple-darwin
            label: macos
            build: build/macosx/x86_64/release

          - host: macos
            os: macos-latest
            target: aarch64-apple-darwin
            label: macos-aarch64
            build: build/macosx/arm64/release

    name: Build (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    env:
      BIN: png2ico
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        shell: bash
        run: |
          echo "PROJECT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Version is ${{ env.PROJECT_VERSION }}"
     
      - uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: '.xmake-cache'

      - name: Build Release (Windows)
        if: ${{ matrix.host == 'windows' }}
        run: |
          xmake f --cflags=-DPNG2ICO_VERSION="\\\"v${{ env.PROJECT_VERSION }}\\\""
          xmake -v

      - name: Build Release
        if: ${{ matrix.host != 'windows' }}
        run: |
          xmake f --cflags="-DPNG2ICO_VERSION='\"v${{ env.PROJECT_VERSION }}\"'"
          xmake -v

      - name: Create Release Archive
        shell: bash
        run: |
          mkdir staging

          if [ "${{ matrix.host }}" = "windows" ]; then
            cp "${{ matrix.build }}/$BIN.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "${{ matrix.build }}/$BIN" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: Upload Archive to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ env.BIN }}-${{ env.PROJECT_VERSION }}-${{ matrix.label }}.zip
          asset_content_type: application/octet-stream

      - name: Upload Archive to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BIN }}-${{ env.PROJECT_VERSION }}-${{ matrix.label }}.zip
          path: release.zip
